#include "exceptions.h"
/*Exceptions.c:
handle all the exceptions 
generated by the hardware
which will print the error and 
a infinite loop*/

void division_by_zero()
{
	//clear();
	printf("Division by zero exception\n");
	while(1)
	{

	}
}
void debug_exception()
{
	//clear();
	printf("Debug exception\n");
	while(1)
	{

	}
}
void non_maskable_int()
{
	//clear();
	printf("Non maskable interrupt\n");
	while(1)
	{

	}
}
void break_point()
{
	//clear();
	printf("Breakpoint exception\n");
	while(1)
	{

	}
}
void into_overflow()
{
	//clear();
	printf("overflow\n");
	while(1)
	{

	}
}
void out_of_bounds()
{
	//clear();
	printf("BOUND Range Exceeded\n");
	while(1)
	{

	}
}
void invalid_opcode()
{
	//clear();
	printf("Invalid Opcode (Undefined Opcode)\n");
	while(1)
	{

	}
}
void device_not_available()
{
	//clear();
	printf("Device Not Available (No Math Coprocessor)\n");
	while(1)
	{

	}
}
void double_fault()
{
	//clear();
	printf("Double Fault\n");
	while(1)
	{

	}
}
void co_segment_overrun()
{
	//clear();
	printf("Coprocessor Segment Overrun\n");
	while(1)
	{

	}
}
void invalid_tss()
{
	//clear();
	printf("Invalid TSS\n");
	while(1)
	{

	}
}
void segment_not_present()
{
	//clear();
	printf("Segment Not Present\n");
	while(1)
	{

	}
}
void stack_fault()
{
	//clear();
	printf("Stack-Segment Fault\n");
	while(1)
	{

	}
}
void general_protection()
{
	/*For debugging use*/
	/*uint32_t error_code;

	asm volatile("popl %0" : "=r" (error_code));
	asm volatile("movl 4(%%esp), %0" : "=r" (error_code[1]));
	asm volatile("movl 4(%%esp), %0" : "=r" (error_code[2]));
	asm volatile("movl 4(%%esp), %0" : "=r" (error_code[3]));*/

	//clear();
	printf("General Protection Fault\n");
	/*printf("General Protection Fault: %x\n", error_code);*/

	while(1)
	{

	}
}
void page_fault()
{
	int cr2val;

	asm volatile("movl %%cr2, %0" : "=r" (cr2val));
	//clear();
	printf("Page Fault: %x\n", cr2val);
	while(1)
	{

	}
}
void x87_floating_point()
{
	//clear();
	printf("x87 FPU Floating-Point Error (Math Fault)\n");
	while(1)
	{

	}
}
void alignment_check()
{
	//clear();
	printf("Alignment Check\n");
	while(1)
	{

	}
}
void machine_check()
{
	//clear();
	printf("Machine Check\n");
	while(1)
	{

	}
}
void SIMD_floating_point()
{
	//clear();
	printf("SIMD Floating-Point Exception\n");
	while(1)
	{

	}
}



